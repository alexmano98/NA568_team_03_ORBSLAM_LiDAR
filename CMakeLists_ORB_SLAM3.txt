cmake_minimum_required(VERSION 2.8)
# project(ORB_SLAM3)
add_definitions(-w)
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()

MESSAGE("Build type: " ${CMAKE_BUILD_TYPE})

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -Wall   -O3")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall   -O3")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -march=native")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native")

# Check C++14 or C++0x support
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++14" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
   add_definitions(-DCOMPILEDWITHC11)
   message(STATUS "Using flag -std=c++14.")
elseif(COMPILER_SUPPORTS_CXX0X)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
   add_definitions(-DCOMPILEDWITHC0X)
   message(STATUS "Using flag -std=c++0x.")
else()
   message(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++14 support. Please use a different C++ compiler.")
endif()

LIST(APPEND CMAKE_MODULE_PATH ${ORB_SLAM_DIR}/cmake_modules)

find_package(OpenCV 4.4)
   if(NOT OpenCV_FOUND)
      message(FATAL_ERROR "OpenCV > 4.4 not found.")
   endif()

MESSAGE("OPENCV VERSION:")
MESSAGE(${OpenCV_VERSION})

find_package(Eigen3 3.1.0 REQUIRED)
find_package(Pangolin REQUIRED)
find_package(realsense2)

include_directories(
${ORB_SLAM_DIR}
${ORB_SLAM_DIR}/include
${ORB_SLAM_DIR}/include/CameraModels
${ORB_SLAM_DIR}/Thirdparty/Sophus
${EIGEN3_INCLUDE_DIR}
${Pangolin_INCLUDE_DIRS}
)

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${ORB_SLAM_DIR}/lib)

add_library(${PROJECT_NAME} SHARED
${ORB_SLAM_DIR}/src/System.cc
${ORB_SLAM_DIR}/src/Tracking.cc
${ORB_SLAM_DIR}/src/LocalMapping.cc
${ORB_SLAM_DIR}/src/LoopClosing.cc
${ORB_SLAM_DIR}/src/ORBextractor.cc
${ORB_SLAM_DIR}/src/ORBmatcher.cc
${ORB_SLAM_DIR}/src/FrameDrawer.cc
${ORB_SLAM_DIR}/src/Converter.cc
${ORB_SLAM_DIR}/src/MapPoint.cc
${ORB_SLAM_DIR}/src/KeyFrame.cc
${ORB_SLAM_DIR}/src/Atlas.cc
${ORB_SLAM_DIR}/src/Map.cc
${ORB_SLAM_DIR}/src/MapDrawer.cc
${ORB_SLAM_DIR}/src/Optimizer.cc
${ORB_SLAM_DIR}/src/Frame.cc
${ORB_SLAM_DIR}/src/KeyFrameDatabase.cc
${ORB_SLAM_DIR}/src/Sim3Solver.cc
${ORB_SLAM_DIR}/src/Viewer.cc
${ORB_SLAM_DIR}/src/ImuTypes.cc
${ORB_SLAM_DIR}/src/G2oTypes.cc
${ORB_SLAM_DIR}/src/CameraModels/Pinhole.cpp
${ORB_SLAM_DIR}/src/CameraModels/KannalaBrandt8.cpp
${ORB_SLAM_DIR}/src/OptimizableTypes.cpp
${ORB_SLAM_DIR}/src/MLPnPsolver.cpp
${ORB_SLAM_DIR}/src/GeometricTools.cc
${ORB_SLAM_DIR}/src/TwoViewReconstruction.cc
${ORB_SLAM_DIR}/src/Config.cc
${ORB_SLAM_DIR}/src/Settings.cc
${ORB_SLAM_DIR}/include/System.h
${ORB_SLAM_DIR}/include/Tracking.h
${ORB_SLAM_DIR}/include/LocalMapping.h
${ORB_SLAM_DIR}/include/LoopClosing.h
${ORB_SLAM_DIR}/include/ORBextractor.h
${ORB_SLAM_DIR}/include/ORBmatcher.h
${ORB_SLAM_DIR}/include/FrameDrawer.h
${ORB_SLAM_DIR}/include/Converter.h
${ORB_SLAM_DIR}/include/MapPoint.h
${ORB_SLAM_DIR}/include/KeyFrame.h
${ORB_SLAM_DIR}/include/Atlas.h
${ORB_SLAM_DIR}/include/Map.h
${ORB_SLAM_DIR}/include/MapDrawer.h
${ORB_SLAM_DIR}/include/Optimizer.h
${ORB_SLAM_DIR}/include/Frame.h
${ORB_SLAM_DIR}/include/KeyFrameDatabase.h
${ORB_SLAM_DIR}/include/Sim3Solver.h
${ORB_SLAM_DIR}/include/Viewer.h
${ORB_SLAM_DIR}/include/ImuTypes.h
${ORB_SLAM_DIR}/include/G2oTypes.h
${ORB_SLAM_DIR}/include/CameraModels/GeometricCamera.h
${ORB_SLAM_DIR}/include/CameraModels/Pinhole.h
${ORB_SLAM_DIR}/include/CameraModels/KannalaBrandt8.h
${ORB_SLAM_DIR}/include/OptimizableTypes.h
${ORB_SLAM_DIR}/include/MLPnPsolver.h
${ORB_SLAM_DIR}/include/GeometricTools.h
${ORB_SLAM_DIR}/include/TwoViewReconstruction.h
${ORB_SLAM_DIR}/include/SerializationUtils.h
${ORB_SLAM_DIR}/include/Config.h
${ORB_SLAM_DIR}/include/Settings.h)

add_subdirectory(${ORB_SLAM_DIR}/Thirdparty/g2o)

# target_link_libraries(${PROJECT_NAME}
# ${OpenCV_LIBS}
# ${EIGEN3_LIBS}
# ${Pangolin_LIBRARIES}
# ${ORB_SLAM_DIR}/Thirdparty/DBoW2/lib/libDBoW2.so
# ${ORB_SLAM_DIR}/Thirdparty/g2o/lib/libg2o.so
# -lboost_serialization
# -lcrypto
# )

target_link_libraries(${PROJECT_NAME}
${OpenCV_LIBS}
${EIGEN3_LIBS}
${Pangolin_LIBRARIES}
/home/alexmano/Desktop/NA568/ORB_SLAM3/Thirdparty/DBoW2/lib/libDBoW2.so
/home/alexmano/Desktop/NA568/ORB_SLAM3/Thirdparty/g2o/lib/libg2o.so
-lboost_serialization
-lcrypto
)

# If RealSense SDK is found the library is added and its examples compiled
if(realsense2_FOUND)
    include_directories(${PROJECT_NAME}
    ${realsense_INCLUDE_DIR}
    )
    target_link_libraries(${PROJECT_NAME}
    ${realsense2_LIBRARY}
    )
endif()


# Build examples

# # RGB-D examples
# set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${ORB_SLAM_DIR}/Examples/RGB-D)

# add_executable(rgbd_tum
#         Examples/RGB-D/rgbd_tum.cc)
# target_link_libraries(rgbd_tum ${PROJECT_NAME})

# if(realsense2_FOUND)
#     add_executable(rgbd_realsense_D435i
#             Examples/RGB-D/rgbd_realsense_D435i.cc)
#     target_link_libraries(rgbd_realsense_D435i ${PROJECT_NAME})
# endif()


# # RGB-D inertial examples
# set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${ORB_SLAM_DIR}/Examples/RGB-D-Inertial)

# if(realsense2_FOUND)
#     add_executable(rgbd_inertial_realsense_D435i
#             Examples/RGB-D-Inertial/rgbd_inertial_realsense_D435i.cc)
#     target_link_libraries(rgbd_inertial_realsense_D435i ${PROJECT_NAME})
# endif()

